//==== dev rules
path / {
    read() { true }
    write() { true }
}
//====

//===https://github.com/FirebaseExtended/bolt/blob/master/docs/guide.md
type Timestamped<T> extends T {
    modified: CurrentTimestamp,
    created: InitialTimestamp
}

type CurrentTimestamp extends Number {
    validate() { this == now }
}

type InitialTimestamp extends Number {
    validate() { initial(this, now) }
}

// Returns true if the value is intialized to init, or retains it's prior value, otherwise.
initial(value, init) { value == (prior(value) == null ? init : prior(value)) }
isCurrentUser(uid) { isSignedIn() && auth.uid == uid }
isSignedIn() { auth != null }
createOnly(value) { prior(value) == null && value != null }
postDoesNotExist(postId) { postId != null && root.posts.data.$postId == null}
postDeletedAtSameTime(postId){postId != null && root.posts.data.$postId == null }
votedAtSameTimeAndNotVoted(postId){root.}
removedVoteAtSameTimeAndHasVoted(postId){}
//===

type TextMessageContent extends String {
    validate() { this.length < 280 }
}

type TextMessage {
    type: String,
    content: TextMessageContent,
    location: String

    validate() { this.type == 'text' }
}

type VoteDirection extends String{
    validate() { this == 'up' || this == 'down' }
}

type Vote {
    up: Number,
    down: Number
}

path /users/{userId} {
    read() { isCurrentUser(userId) }
    write() { isCurrentUser(userId) }
}

path /posts {

    path /owner {
        path /userId {
            read() { isCurrentUser(userId) }
            path /posts/{postId} is Boolean {
                create() { isCurrentUser(userId) && postDoesNotExist(postId) }
                delete() { isCurrentUser(userId)  && postDeletedAtSameTime(postId) }
            }

            path /votes/{postId} is VoteDirection {
                    create() { isCurrentUser(userId) && votedAtSameTimeAndNotVoted(postId,VoteDirection) }
                    delete() { isCurrentUser(userId) && removedVoteAtSameTimeAndHasVoted(postId,VoteDirection) }
            }
        }
    }

    path /data {
        read() { isSignedIn() }

        path /posts/{postId} is Timestamped<TextMessage> {
            create() { isSignedIn() } // && postIdOwned
        }

        path /votes/{postId} is Vote {
            write() { true }
        }

    }

}
